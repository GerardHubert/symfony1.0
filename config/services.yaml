# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Taxes\Detector:
        arguments:
            $seuil: '100'

    App\Stripe\StripeService:
        arguments:
            $pk: '%env(STRIPE_PUBLIC_KEY)%'
            $sk: '%env(STRIPE_SECRET_KEY)%'

    # # on ajoute notre listener == on déclare notre classe comme un nouveau listener en l'étiquetant
    # App\EventDispatcher\PrenomListener:
    #     tags: [{
    #         name: kernel.event_listener, # le nom de l'étiquette que je colle sur ce service == doit être enregistré auprès de l'eventDispatcher
    #         event: kernel.request, # quel évènement doit-il écouter ? a quel moment appeler PrenomListener ?
    #         method: addPrenomToAttributes # quelle fonction de PrenomListener appeler ?
    #     }]

    # # on déclare un listener d'évènement doctrine : on écoute ici toutes les entités
    # App\Doctrine\Listener\ProductSlugListener:
    #     tags: [{
    #         name: 'doctrine.event_listener',
    #         event: 'prePersist'
    #     }]

    # Pour écouter une entité particulière : on change le nom du listener et on indique l'entité concernée
    # Permer de ne pas déclencher l'évènement à chaque fois qu'une entité est créée (performances)
    App\Doctrine\Listener\ProductSlugListener:
        tags: [{
            name: 'doctrine.orm.entity_listener',
            event: 'prePersist',
            entity: 'App\Entity\Product'
        }]

    App\Doctrine\Listener\CategorySlugListener:
        tags: [{
            name: 'doctrine.orm.entity_listener',
            event: 'prePersist',
            entity: 'App\Entity\Category'
        }]